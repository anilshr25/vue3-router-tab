@use "sass:math";
@use "sass:color";
@use "variables" as *;

// Theme Setup
:root[data-theme="light"] {
  color-scheme: light;
  --router-tab-background: #{$router-tab-bg-light};
  --router-tab-foreground: #{$router-tab-text-light};
  --router-tab-border: #{$router-tab-border-light};
  --router-tab-header-bg: #{$router-tab-bg-light};
}

:root[data-theme="dark"] {
  color-scheme: dark;
  --router-tab-active-border: #ffff;
  --router-tab-background: #{$router-tab-bg-dark};
  --router-tab-foreground: #{$router-tab-text-dark};
  --router-tab-border: #{$router-tab-border-dark};
  --router-tab-header-bg: #{$router-tab-bg-dark};
}

@media (prefers-color-scheme: dark) {
  :root:not([data-theme]) {
    color-scheme: dark;
    --router-tab-background: #{$router-tab-bg-dark};
    --router-tab-foreground: #{$router-tab-text-dark};
    --router-tab-border: #{$router-tab-border-dark};
    --router-tab-header-bg: #{$router-tab-bg-dark};
  }
}

// Main Component Styles
.router-tab {
  display: flex;
  flex-direction: column;
  min-height: 300px;
  background-color: var(--router-tab-background);
  color: var(--router-tab-foreground);

  &__header {
    position: relative;
    z-index: 9;
    display: flex;
    flex: none;
    box-sizing: border-box;
    height: var(--router-tab-header-height, $router-tab-header-height);
    background-color: var(--router-tab-header-bg);
    transition: $router-tab-transition-fast;
    border-bottom: 1px solid var(--router-tab-border);
  }

  &__slot-start,
  &__slot-end {
    display: flex;
    align-items: center;
  }

  &__scroll {
    position: relative;
    flex: 1 1 0px;
    height: var(--router-tab-header-height, $router-tab-header-height);
    overflow: hidden;

    &-container {
      width: 100%;
      height: 100%;
      overflow: hidden;

      &.is-mobile {
        overflow-x: auto;
        overflow-y: hidden;
      }
    }
  }

  &__scrollbar {
    $h: 3px;

    position: absolute;
    right: 0;
    bottom: 0;
    left: 0;
    height: $h;
    background-color: rgba(0, 0, 0, 0.1);
    border-radius: $h;
    opacity: 0;
    transition: opacity 0.3s ease-in-out;

    .router-tab__scroll:hover &,
    &.is-dragging {
      opacity: 1;
    }

    &-thumb {
      position: absolute;
      top: 0;
      left: 0;
      height: 100%;
      background-color: rgba(0, 0, 0, 0.1);
      border-radius: $h;
      transition: background-color 0.3s ease-in-out;

      &:hover,
      .router-tab__scrollbar.is-dragging & {
        background-color: rgba(0, 0, 0, 0.2);
      }
    }
  }

  &__nav {
    position: relative;
    display: inline-flex;
    flex-wrap: nowrap;
    height: 100%;
    margin: 0;
    padding: 0;
    list-style: none;
  }

  &__item {
    position: relative;
    display: flex;
    flex: none;
    align-items: center;
    padding: 0 var(--router-tab-padding, $router-tab-padding);
    color: inherit;
    font-size: var(--router-tab-font-size, $router-tab-font-size);
    transform-origin: left bottom;
    cursor: pointer;
    transition: var(--router-tab-transition, $router-tab-transition);
    user-select: none;
    background-color: transparent;
    border-right: 1px solid var(--router-tab-border);

    &:first-child {
      border-left: 1px solid var(--router-tab-border);
    }

    &.is-contextmenu {
      color: var(--router-tab-primary);
    }

    // Drag and drop states
    &.is-dragging {
      opacity: $router-tab-drag-opacity;
      cursor: $router-tab-drag-cursor;
    }

    &.is-drag-over {
      background: $router-tab-drag-over-bg;
      transition: background 0.15s ease;

      &::before {
        content: "";
        position: absolute;
        left: -2px;
        top: 0;
        bottom: 0;
        width: 2px;
        background: var(--router-tab-primary);
      }
    }

    &[draggable="true"] {
      cursor: $router-tab-drag-cursor;
    }

    &-title {
      min-width: $router-tab-title-min-width;
      max-width: $router-tab-title-max-width;
      overflow: hidden;
      white-space: nowrap;
      text-overflow: ellipsis;
    }

    &-icon {
      margin-right: $router-tab-icon-margin;
      font-size: $router-tab-icon-size;
    }

    &:hover,
    &.is-active {
      color: var(--router-tab-active-border);

      &.is-closable {
        padding: 0
          calc(
            var(--router-tab-padding, #{$router-tab-padding}) -
              (#{$router-tab-close-icon-size} + #{$router-tab-close-icon-margin}) / 2
          );
      }

      .router-tab__item-close {
        width: $router-tab-close-icon-size;
        margin-left: $router-tab-close-icon-margin;

        &::before,
        &::after {
          background-color: currentColor;
        }
      }
    }

    &.is-active {
      background-color: var(--router-tab-background);
      color: var(--router-tab-active-border);
      border-bottom: 2px solid var(--router-tab-active-border);
      font-weight: 510;
    }

    &-close {
      $inner: 8px;

      position: relative;
      display: block;
      width: 0;
      height: $router-tab-close-icon-size;
      margin-left: 0;
      overflow: hidden;
      border-radius: 50%;
      cursor: pointer;
      transition: var(--router-tab-transition, $router-tab-transition);
      background: transparent;
      border: none;

      &::before,
      &::after {
        position: absolute;
        top: 6px;
        left: 50%;
        display: block;
        width: $inner;
        height: 1px;
        margin-left: math.div(-$inner, 2);
        background-color: currentColor;
        transition: background-color 0.2s ease-in-out;
        content: "";
      }

      &::before {
        transform: rotate(-45deg);
      }

      &::after {
        transform: rotate(45deg);
      }

      &:hover {
        background-color: color-mix(in srgb, var(--router-tab-primary) 40%, transparent 60%);

        &::before,
        &::after {
          background-color: #fff;
        }
      }
    }
  }

  &__contextmenu {
    position: fixed;
    z-index: 1000;
    min-width: $router-tab-contextmenu-min-width;
    padding: $router-tab-contextmenu-padding;
    font-size: var(--router-tab-font-size, $router-tab-font-size);
    background: var(--router-tab-background);
    border: 1px solid var(--router-tab-border);
    box-shadow: $router-tab-contextmenu-shadow;
    border-radius: $router-tab-contextmenu-border-radius;

    &-item {
      display: block;
      width: 100%;
      padding: $router-tab-contextmenu-item-padding;
      line-height: $router-tab-contextmenu-item-height;
      text-align: left;
      text-decoration: none;
      background: transparent;
      border: none;
      color: inherit;
      cursor: pointer;
      font: inherit;
      transition: background-color 0.2s ease-in-out;
      border-radius: calc(#{$router-tab-contextmenu-border-radius} - 4px);

      &[aria-disabled="true"] {
        color: rgba(148, 163, 184, 0.6);
        pointer-events: none;
        cursor: not-allowed;
      }

      &:hover:not([aria-disabled="true"]),
      &:focus-visible {
        background: color-mix(in srgb, var(--router-tab-primary) 10%, transparent 90%);
        color: var(--router-tab-primary);
      }
    }
  }

  &__container {
    position: relative;
    flex: 1 1 auto;
    background-color: var(--router-tab-background);
    overflow: hidden;
  }
}
.router-tab__item.is-active:after {
  display: none !important;
}

.router-tab__item.is-active + .router-tab__item {
  border-left-color: transparent;
}

// Transition animations
.router-tab-zoom-enter-active,
.router-tab-zoom-leave-active {
  transition: all 0.3s ease;
}

.router-tab-zoom-enter-from,
.router-tab-zoom-leave-to {
  opacity: 0;
  transform: scale(0.8);
}

.router-tab-swap-enter-active,
.router-tab-swap-leave-active {
  transition:
    opacity 0.2s ease,
    transform 0.2s ease;
}

.router-tab-swap-enter-from {
  opacity: 0;
  transform: translateX(10px);
}

.router-tab-swap-leave-to {
  opacity: 0;
  transform: translateX(-10px);
}

.router-tab-page {
  width: 100%;
  height: 100%;
}
